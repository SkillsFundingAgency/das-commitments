trigger:
  batch: true
  branches:
    include:
      - "master"

variables:
  - group: 'Prod Management Resources'
  - name: buildConfiguration
    value: 'release'
  - name: buildPlatform
    value: 'any cpu'

stages:
- stage: v1TestBuild
  displayName: Build process to allow Commitments v1 tests 
  jobs:
  - job: build_test_v1
    displayName: Build and Test commitments v1 only
    pool:
      name: 'DAS - Continuous Integration'
    steps:
      - task: UseGitVersion@5
        displayName: GitVersion
        inputs:
          versionSpec: 5.x
          mode: Mainline

      - task: NuGetToolInstaller@0
        displayName: 'Use NuGet 4.3.0'
        inputs:
          versionSpec: 4.x

      - task: NuGetCommand@2
        displayName: 'NuGet restore'
        inputs:
          restoreSolution: 'src/SFA.DAS.CommitmentsTestSolution.sln'

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: restore
          projects: "src/**/*.csproj"  

      - task: VSBuild@1
        displayName: 'Build solution'
        inputs:
          solution: 'src/SFA.DAS.Commitments.sln'
          vsVersion: 15.0
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          clean: true

      - task: VSTest@2
        displayName: 'VS test'
        inputs:
          testAssemblyVer2: |
            **/bin/Release/*UnitTests.dll
            !**/CommitmentsV2/**
            !**/*Reservations.Api*/**
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'

- stage: build
  displayName: Build Commitments 
  jobs:
  - job: build_commitments
    displayName: Build Commitments 
    pool:
      name: 'DAS - Continuous Integration'
      demands: Agent.OS -equals Windows_NT
    steps:
    - task: UseGitVersion@5
      displayName: GitVersion
      inputs:
        versionSpec: 5.x
        mode: Mainline

    - pwsh: |
        $Projects = Get-ChildItem -Filter *.csproj -Recurse
        $ErrorFound = $false
        foreach ($Project in $Projects) {
          dotnet list $Project package --deprecated | Tee-Object -Variable Deprecated
          if (([Version](dotnet --version)).Major -ge 5) {
            dotnet list $Project package --vulnerable --include-transitive | Tee-Object -Variable Vulnerable
          }
          $Errors = $Deprecated + $Vulnerable | Select-String '>'

          if ($Errors.Count -gt 0) {
            Write-Host "##vso[task.logissue type=warning]Package issues discovered, review output above"
            $ErrorFound = $true
          }
        }
        $ErrorFound ? $(exit 1) : $(exit 0)
      workingDirectory:  $(Agent.BuildDirectory)/s/
      displayName: Package Scanning
      continueOnError: true


    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet 4.3.0'
      inputs:
        versionSpec: 4.x

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: 'src/SFA.DAS.Commitments.sln'

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: "src/**/*.csproj"   

    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: 'src/SFA.DAS.Commitments.sln'
        vsVersion: 15.0
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        clean: true

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: 'src/CommitmentsV2/**/*.UnitTests.csproj'   

    - task: DotNetCoreCLI@2
      displayName: 'Publish v2 API'
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'src/CommitmentsV2/SFA.DAS.CommitmentsV2.Api/SFA.DAS.CommitmentsV2.Api.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)/publish --no-restore  --no-build'

    - task: DotNetCoreCLI@2
      displayName: 'publish v2 WebJob'
      inputs:
        command: custom
        projects: 'src/CommitmentsV2/SFA.DAS.CommitmentsV2.Host/SFA.DAS.CommitmentsV2.Host.csproj'
        custom: msbuild
        arguments: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)/publish"'

    - task: DotNetCoreCLI@2
      displayName: 'publish Support Site'
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'src/SFA.DAS.Commitments.Support.SubSite/SFA.DAS.Commitments.Support.SubSite.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)/publish --no-restore  --no-build'
  
    - task: VSBuild@1
      displayName: 'Publish v1 API'
      inputs:
        solution: 'src/SFA.DAS.Commitments.Api/SFA.DAS.Commitments.Api.csproj'
        vsVersion: 15.0
        msbuildArgs: '/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:SkipInvalidConfigurations=true /p:publishUrl="$(build.artifactstagingdirectory)/v1-api"'
        platform: 'anycpu'
        configuration: '$(buildConfiguration)'
        clean: true

    - task: ArchiveFiles@2
      displayName: 'Archive v1 API'
      inputs:
        rootFolderOrFile: '$(build.artifactstagingdirectory)/v1-api'
        archiveFile: '$(Build.ArtifactStagingDirectory)/publish/SFA.DAS.Commitments.Api.zip'

    - task: VSBuild@1
      displayName: 'Publish v1 WebJob'
      inputs:
        solution: 'src/SFA.DAS.Commitments.Host.WebJob/SFA.DAS.Commitments.Host.WebJob.csproj'
        vsVersion: 15.0
        msbuildArgs: '/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:SkipInvalidConfigurations=true /p:publishUrl="$(build.artifactstagingdirectory)/v1-webjob"'
        platform: 'anycpu'
        configuration: '$(buildConfiguration)'
        clean: true

    - task: ArchiveFiles@2
      displayName: 'Archive v1 Webjob'
      inputs:
        rootFolderOrFile: '$(build.artifactstagingdirectory)/v1-webjob'
        archiveFile: '$(Build.ArtifactStagingDirectory)/publish/SFA.DAS.Commitments.Host.WebJob.zip'

    - task: NuGetCommand@2
      displayName: 'NuGet pack'
      inputs:
        command: pack
        packagesToPack: 'src/SFA.DAS.Commitments.Events/SFA.DAS.Commitments.Events.csproj'
        packDestination: '$(build.artifactstagingdirectory)/publish/nuget-publish'
        versioningScheme: byBuildNumber

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        packagesToPack: 'src/SFA.DAS.Commitments.Api.Client/SFA.DAS.Commitments.Api.Client.csproj;src/SFA.DAS.Commitments.Api.Types/SFA.DAS.Commitments.Api.Types.csproj;src/CommitmentsV2/SFA.DAS.CommitmentsV2.Api.Client/SFA.DAS.CommitmentsV2.Api.Client.csproj;src/CommitmentsV2/SFA.DAS.CommitmentsV2.Api.Types/SFA.DAS.CommitmentsV2.Api.Types.csproj;src/CommitmentsV2/SFA.DAS.CommitmentsV2.Messages/SFA.DAS.CommitmentsV2.Messages.csproj;src/CommitmentsV2/SFA.DAS.CommitmentsV2.Types/SFA.DAS.CommitmentsV2.Types.csproj;src/SFA.DAS.Reservations.Api.Client/SFA.DAS.Reservations.Api.Client.csproj;src/CommitmentsV2/SFA.DAS.ReservationsV2.Api.Client/SFA.DAS.ReservationsV2.Api.Client.csproj;src/SFA.DAS.Reservations.API.Types/SFA.DAS.Reservations.Api.Types.csproj;src/SFA.DAS.Reservations.Api.Client/SFA.DAS.Reservations.Api.Client.csproj;src/CommitmentsV2/SFA.DAS.CommitmentsV2.Shared/SFA.DAS.CommitmentsV2.Shared.csproj'
        packDirectory: 'nuget-publish'
        versioningScheme: byBuildNumber
        buildProperties: 'Version="$(Build.BuildNumber)"'  
    
    - task: VSBuild@1
      displayName: 'Build DACPAC'
      inputs:
        solution: 'src/SFA.DAS.Commitments.Database/SFA.DAS.Commitments.Database.sqlproj'
        platform: 'anycpu'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/p:PackageLocation="$(build.artifactstagingdirectory)/publish"'    

    - task: CopyFiles@2
      displayName: "Copy Files to: $(build.artifactstagingdirectory)"
      inputs:
        contents: |
          azure/**
          nuget-publish/*.nupkg
          src/**/*.dacpac
        targetFolder: "$(build.artifactstagingdirectory)/publish"

    - task: PublishBuildArtifacts@1
      displayName: "Publish Artifact"
      inputs:
        pathtoPublish: "$(build.artifactstagingdirectory)/publish"
