using System.Collections.Generic;
using System.Threading.Tasks;
using SFA.DAS.Commitments.Api.IntegrationTests.DatabaseSetup.Entities;
using SFA.DAS.Commitments.Api.IntegrationTests.Helpers;

namespace SFA.DAS.Commitments.Api.IntegrationTests.DatabaseSetup
{
    public class TestDataInjector
    {
        public List<DbSetupCommitment> Commitments { get; }
        public List<DbSetupApprenticeship> Apprenticeships { get; }

        public long FirstApprenticeshipId { get; private set; }

        public long NextCommitmentId { get; private set; }
        public long NextApprenticeshipId { get; private set; }

        public static async Task<TestDataInjector> Construct(CommitmentsDatabase commitmentsDatabase, TestIds testIds)
        {
            var testDataInjector = new TestDataInjector
            {
                _testIds = testIds,
                FirstApprenticeshipId = await commitmentsDatabase.FirstNewId(CommitmentsDatabase.ApprenticeshipTableName),
                NextCommitmentId = await commitmentsDatabase.FirstNewId(CommitmentsDatabase.CommitmentTableName)
            };
            testDataInjector.NextApprenticeshipId = testDataInjector.FirstApprenticeshipId;
            return testDataInjector;
        }

        public long AddCommitment(DbSetupCommitment commitment, string testIdName = null)
        {
            // id is actually generated by db, but if we insert the entities in order, the ids should match (we can assert that's the case)
            commitment.Id = NextCommitmentId++;

            // this is a convention we use to avoid clashes and it allows the consumer to give the employeraccountid a testIdName
            // we may do something better than this at a later point
            commitment.EmployerAccountId = commitment.Id;

            Commitments.Add(commitment);

            if (testIdName != null)
                _testIds[testIdName] = commitment.Id;

            return commitment.Id;
        }

        /// <summary>
        /// Adds the given apprenticeship into the generated db data 
        /// </summary>
        /// <param name="apprenticeship">The apprenticeship to add</param>
        /// <param name="testIdName">
        /// Leave null if you don't require the id of this particular entity for your integration test.
        /// Pass an unique string if your integration test requires the generated id for calling the sut,
        /// which it can get from the TestSetup.TestIds[] dictionary, keyed on the same string.
        /// </param>
        /// <returns>The Id of the new apprenticeship that can be inserted into other added entities.</returns>
        public long AddApprenticeship(DbSetupApprenticeship apprenticeship, string testIdName = null)
        {
            // id is actually generated by db, but if we insert the entities in order, the ids should match (we can assert that's the case)
            apprenticeship.Id = NextApprenticeshipId++;

            Apprenticeships.Add(apprenticeship);

            if (testIdName != null)
                _testIds[testIdName] = apprenticeship.Id;

            return apprenticeship.Id;
        }

        private TestIds _testIds;

        private TestDataInjector()
        {
            Commitments = new List<DbSetupCommitment>();
            Apprenticeships = new List<DbSetupApprenticeship>();
        }
    }
}
